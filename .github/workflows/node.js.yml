# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build --if-present
      env:
        TURBO_TELEMETRY_DISABLED: 1
    - run: npm test
      
  playwright-tests:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout .NET Backend
      uses: actions/checkout@v4
      with:
        repository: kemalk89/TaskSync
        path: dotnet-backend

    - name: Start .NET Backend Dependencies (like postgresql) with Docker Compose
      run: docker compose up -d
      working-directory: dotnet-backend

    - name: Build .NET Backend Docker image
      run: docker build -t tasksync-backend .
      working-directory: dotnet-backend

    - name: Start .NET Backend with Docker
      run: |
        docker run -d --name tasksync-backend \
          -e Auth__Audience=https://tasksync.api.de/api \
          -e Auth__MetadataAddress=http://host.docker.internal:3002/.well-known/openid-configuration \
          -p 8080:8080 \
          tasksync-backend 
      working-directory: dotnet-backend

    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*
    - name: Install dependencies
      run: npm ci
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps

    - name: Generate AUTH_SECRET
      run: npx -y auth secret
      working-directory: apps/web

    - name: Run Playwright tests
      run: npx playwright test
      env:
        SERVICE_TASKSYNC: http://localhost:8080
        AUTH_AUDIENCE: https://tasksync.api.de/api
    - uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 14
